buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.unbroken-dome.test-sets' version '1.4.4'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile project (':troskovi-common')
    compile project (':expenses-model')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.modelmapper:modelmapper:1.1.0')
    compile('mysql:mysql-connector-java')
    runtime('org.postgresql:postgresql')
    compile('org.liquibase:liquibase-core') // to pass integrationTest had to disable liquibase
    compile('io.vavr:vavr:0.9.0')

    // testing
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.cloud:spring-cloud-starter-contract-verifier')
    testCompile('com.h2database:h2')
    testCompile('org.junit.jupiter:junit-jupiter-api:5.0.2')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.0.2')
    testCompile('org.junit.platform:junit-platform-engine:1.0.2')
    testCompile('org.junit.platform:junit-platform-launcher:1.0.2')
    testCompile('org.junit.platform:junit-platform-runner:1.0.2')
    testCompile('org.junit.vintage:junit-vintage-engine:4.12.2')
    //compile ('org.testcontainers:mssqlserver:1.4.3')
    compile ('org.testcontainers:postgresql:1.3.1')
}

ext {
    springCloudVersion = 'Finchley.M8'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// integration testing
testSets {
    integrationTest
}

//check.dependsOn integrationTest
//integrationTest.mustRunAfter test

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/testInt/java')
        }
        resources.srcDir 'src/testInt/resources'
    }
}